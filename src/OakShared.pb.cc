// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OakShared.proto

#include "OakShared.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChallengeStatSaveGameData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakChallengeRewardSaveGameData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisteredDownloadableEntitlement_OakShared_2eproto;
namespace OakSave {
class Vec3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3> _instance;
} _Vec3_default_instance_;
class GameStatSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStatSaveGameData> _instance;
} _GameStatSaveGameData_default_instance_;
class InventoryCategorySaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InventoryCategorySaveData> _instance;
} _InventoryCategorySaveData_default_instance_;
class OakSDUSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakSDUSaveGameData> _instance;
} _OakSDUSaveGameData_default_instance_;
class RegisteredDownloadableEntitlementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisteredDownloadableEntitlement> _instance;
} _RegisteredDownloadableEntitlement_default_instance_;
class RegisteredDownloadableEntitlementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisteredDownloadableEntitlements> _instance;
} _RegisteredDownloadableEntitlements_default_instance_;
class ChallengeStatSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChallengeStatSaveGameData> _instance;
} _ChallengeStatSaveGameData_default_instance_;
class OakChallengeRewardSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakChallengeRewardSaveGameData> _instance;
} _OakChallengeRewardSaveGameData_default_instance_;
class ChallengeSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChallengeSaveGameData> _instance;
} _ChallengeSaveGameData_default_instance_;
}  // namespace OakSave
static void InitDefaultsscc_info_ChallengeSaveGameData_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_ChallengeSaveGameData_default_instance_;
    new (ptr) ::OakSave::ChallengeSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::ChallengeSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChallengeSaveGameData_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChallengeSaveGameData_OakShared_2eproto}, {
      &scc_info_ChallengeStatSaveGameData_OakShared_2eproto.base,
      &scc_info_OakChallengeRewardSaveGameData_OakShared_2eproto.base,}};

static void InitDefaultsscc_info_ChallengeStatSaveGameData_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_ChallengeStatSaveGameData_default_instance_;
    new (ptr) ::OakSave::ChallengeStatSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::ChallengeStatSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChallengeStatSaveGameData_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChallengeStatSaveGameData_OakShared_2eproto}, {}};

static void InitDefaultsscc_info_GameStatSaveGameData_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GameStatSaveGameData_default_instance_;
    new (ptr) ::OakSave::GameStatSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GameStatSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStatSaveGameData_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameStatSaveGameData_OakShared_2eproto}, {}};

static void InitDefaultsscc_info_InventoryCategorySaveData_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_InventoryCategorySaveData_default_instance_;
    new (ptr) ::OakSave::InventoryCategorySaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::InventoryCategorySaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InventoryCategorySaveData_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InventoryCategorySaveData_OakShared_2eproto}, {}};

static void InitDefaultsscc_info_OakChallengeRewardSaveGameData_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakChallengeRewardSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakChallengeRewardSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakChallengeRewardSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakChallengeRewardSaveGameData_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakChallengeRewardSaveGameData_OakShared_2eproto}, {}};

static void InitDefaultsscc_info_OakSDUSaveGameData_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakSDUSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakSDUSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakSDUSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakSDUSaveGameData_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakSDUSaveGameData_OakShared_2eproto}, {}};

static void InitDefaultsscc_info_RegisteredDownloadableEntitlement_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_RegisteredDownloadableEntitlement_default_instance_;
    new (ptr) ::OakSave::RegisteredDownloadableEntitlement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::RegisteredDownloadableEntitlement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisteredDownloadableEntitlement_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisteredDownloadableEntitlement_OakShared_2eproto}, {}};

static void InitDefaultsscc_info_RegisteredDownloadableEntitlements_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_RegisteredDownloadableEntitlements_default_instance_;
    new (ptr) ::OakSave::RegisteredDownloadableEntitlements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::RegisteredDownloadableEntitlements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisteredDownloadableEntitlements_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegisteredDownloadableEntitlements_OakShared_2eproto}, {
      &scc_info_RegisteredDownloadableEntitlement_OakShared_2eproto.base,}};

static void InitDefaultsscc_info_Vec3_OakShared_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_Vec3_default_instance_;
    new (ptr) ::OakSave::Vec3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::Vec3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_OakShared_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec3_OakShared_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OakShared_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OakShared_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OakShared_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OakShared_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GameStatSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GameStatSaveGameData, stat_value_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GameStatSaveGameData, stat_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryCategorySaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryCategorySaveData, base_category_definition_hash_),
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryCategorySaveData, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakSDUSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakSDUSaveGameData, sdu_level_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakSDUSaveGameData, sdu_data_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlement, id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlement, consumed_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlement, registered_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlement, seen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlements, entitlement_source_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlements, entitlement_ids_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RegisteredDownloadableEntitlements, entitlements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeStatSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeStatSaveGameData, current_stat_value_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeStatSaveGameData, challenge_stat_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakChallengeRewardSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakChallengeRewardSaveGameData, challenge_reward_claimed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, completed_count_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, is_active_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, currently_completed_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, completed_progress_level_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, progress_counter_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, stat_instance_state_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, challenge_class_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeSaveGameData, challenge_reward_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::OakSave::Vec3)},
  { 8, -1, sizeof(::OakSave::GameStatSaveGameData)},
  { 15, -1, sizeof(::OakSave::InventoryCategorySaveData)},
  { 22, -1, sizeof(::OakSave::OakSDUSaveGameData)},
  { 29, -1, sizeof(::OakSave::RegisteredDownloadableEntitlement)},
  { 38, -1, sizeof(::OakSave::RegisteredDownloadableEntitlements)},
  { 46, -1, sizeof(::OakSave::ChallengeStatSaveGameData)},
  { 53, -1, sizeof(::OakSave::OakChallengeRewardSaveGameData)},
  { 59, -1, sizeof(::OakSave::ChallengeSaveGameData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_Vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GameStatSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_InventoryCategorySaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakSDUSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_RegisteredDownloadableEntitlement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_RegisteredDownloadableEntitlements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_ChallengeStatSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakChallengeRewardSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_ChallengeSaveGameData_default_instance_),
};

const char descriptor_table_protodef_OakShared_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017OakShared.proto\022\007OakSave\"\'\n\004Vec3\022\t\n\001x\030"
  "\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"=\n\024GameStatS"
  "aveGameData\022\022\n\nstat_value\030\001 \001(\005\022\021\n\tstat_"
  "path\030\002 \001(\t\"T\n\031InventoryCategorySaveData\022"
  "%\n\035base_category_definition_hash\030\001 \001(\r\022\020"
  "\n\010quantity\030\002 \001(\005\">\n\022OakSDUSaveGameData\022\021"
  "\n\tsdu_level\030\001 \001(\005\022\025\n\rsdu_data_path\030\002 \001(\t"
  "\"c\n!RegisteredDownloadableEntitlement\022\n\n"
  "\002id\030\001 \001(\005\022\020\n\010consumed\030\002 \001(\r\022\022\n\nregistere"
  "d\030\003 \001(\010\022\014\n\004seen\030\004 \001(\010\"\246\001\n\"RegisteredDown"
  "loadableEntitlements\022%\n\035entitlement_sour"
  "ce_asset_path\030\001 \001(\t\022\027\n\017entitlement_ids\030\002"
  " \003(\003\022@\n\014entitlements\030\003 \003(\0132*.OakSave.Reg"
  "isteredDownloadableEntitlement\"T\n\031Challe"
  "ngeStatSaveGameData\022\032\n\022current_stat_valu"
  "e\030\001 \001(\005\022\033\n\023challenge_stat_path\030\002 \001(\t\"B\n\036"
  "OakChallengeRewardSaveGameData\022 \n\030challe"
  "nge_reward_claimed\030\001 \001(\010\"\303\002\n\025ChallengeSa"
  "veGameData\022\027\n\017completed_count\030\001 \001(\005\022\021\n\ti"
  "s_active\030\002 \001(\010\022\033\n\023currently_completed\030\003 "
  "\001(\010\022 \n\030completed_progress_level\030\004 \001(\005\022\030\n"
  "\020progress_counter\030\005 \001(\005\022\?\n\023stat_instance"
  "_state\030\006 \003(\0132\".OakSave.ChallengeStatSave"
  "GameData\022\034\n\024challenge_class_path\030\007 \001(\t\022F"
  "\n\025challenge_reward_info\030\010 \003(\0132\'.OakSave."
  "OakChallengeRewardSaveGameDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OakShared_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OakShared_2eproto_sccs[9] = {
  &scc_info_ChallengeSaveGameData_OakShared_2eproto.base,
  &scc_info_ChallengeStatSaveGameData_OakShared_2eproto.base,
  &scc_info_GameStatSaveGameData_OakShared_2eproto.base,
  &scc_info_InventoryCategorySaveData_OakShared_2eproto.base,
  &scc_info_OakChallengeRewardSaveGameData_OakShared_2eproto.base,
  &scc_info_OakSDUSaveGameData_OakShared_2eproto.base,
  &scc_info_RegisteredDownloadableEntitlement_OakShared_2eproto.base,
  &scc_info_RegisteredDownloadableEntitlements_OakShared_2eproto.base,
  &scc_info_Vec3_OakShared_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OakShared_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OakShared_2eproto = {
  false, false, descriptor_table_protodef_OakShared_2eproto, "OakShared.proto", 1038,
  &descriptor_table_OakShared_2eproto_once, descriptor_table_OakShared_2eproto_sccs, descriptor_table_OakShared_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_OakShared_2eproto::offsets,
  file_level_metadata_OakShared_2eproto, 9, file_level_enum_descriptors_OakShared_2eproto, file_level_service_descriptors_OakShared_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OakShared_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OakShared_2eproto)), true);
namespace OakSave {

// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
class Vec3::_Internal {
 public:
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:OakSave.Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:OakSave.Vec3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vec3::ArenaDtor(void* object) {
  Vec3* _this = reinterpret_cast< Vec3* >(object);
  (void)_this;
}
void Vec3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3& Vec3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3_OakShared_2eproto.base);
  return *internal_default_instance();
}


void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.Vec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.Vec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, z_)
      + sizeof(Vec3::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameStatSaveGameData::InitAsDefaultInstance() {
}
class GameStatSaveGameData::_Internal {
 public:
};

GameStatSaveGameData::GameStatSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GameStatSaveGameData)
}
GameStatSaveGameData::GameStatSaveGameData(const GameStatSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stat_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stat_path().empty()) {
    stat_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stat_path(),
      GetArena());
  }
  stat_value_ = from.stat_value_;
  // @@protoc_insertion_point(copy_constructor:OakSave.GameStatSaveGameData)
}

void GameStatSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStatSaveGameData_OakShared_2eproto.base);
  stat_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stat_value_ = 0;
}

GameStatSaveGameData::~GameStatSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.GameStatSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameStatSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stat_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameStatSaveGameData::ArenaDtor(void* object) {
  GameStatSaveGameData* _this = reinterpret_cast< GameStatSaveGameData* >(object);
  (void)_this;
}
void GameStatSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStatSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStatSaveGameData& GameStatSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStatSaveGameData_OakShared_2eproto.base);
  return *internal_default_instance();
}


void GameStatSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GameStatSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stat_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStatSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stat_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stat_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stat_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.GameStatSaveGameData.stat_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStatSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GameStatSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stat_value = 1;
  if (this->stat_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stat_value(), target);
  }

  // string stat_path = 2;
  if (this->stat_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stat_path().data(), static_cast<int>(this->_internal_stat_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.GameStatSaveGameData.stat_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stat_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GameStatSaveGameData)
  return target;
}

size_t GameStatSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GameStatSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stat_path = 2;
  if (this->stat_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stat_path());
  }

  // int32 stat_value = 1;
  if (this->stat_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stat_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStatSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GameStatSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStatSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStatSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GameStatSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GameStatSaveGameData)
    MergeFrom(*source);
  }
}

void GameStatSaveGameData::MergeFrom(const GameStatSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GameStatSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stat_path().size() > 0) {
    _internal_set_stat_path(from._internal_stat_path());
  }
  if (from.stat_value() != 0) {
    _internal_set_stat_value(from._internal_stat_value());
  }
}

void GameStatSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GameStatSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatSaveGameData::CopyFrom(const GameStatSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GameStatSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatSaveGameData::IsInitialized() const {
  return true;
}

void GameStatSaveGameData::InternalSwap(GameStatSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stat_path_.Swap(&other->stat_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stat_value_, other->stat_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStatSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InventoryCategorySaveData::InitAsDefaultInstance() {
}
class InventoryCategorySaveData::_Internal {
 public:
};

InventoryCategorySaveData::InventoryCategorySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.InventoryCategorySaveData)
}
InventoryCategorySaveData::InventoryCategorySaveData(const InventoryCategorySaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&base_category_definition_hash_, &from.base_category_definition_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&base_category_definition_hash_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:OakSave.InventoryCategorySaveData)
}

void InventoryCategorySaveData::SharedCtor() {
  ::memset(&base_category_definition_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&base_category_definition_hash_)) + sizeof(quantity_));
}

InventoryCategorySaveData::~InventoryCategorySaveData() {
  // @@protoc_insertion_point(destructor:OakSave.InventoryCategorySaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InventoryCategorySaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InventoryCategorySaveData::ArenaDtor(void* object) {
  InventoryCategorySaveData* _this = reinterpret_cast< InventoryCategorySaveData* >(object);
  (void)_this;
}
void InventoryCategorySaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InventoryCategorySaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InventoryCategorySaveData& InventoryCategorySaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InventoryCategorySaveData_OakShared_2eproto.base);
  return *internal_default_instance();
}


void InventoryCategorySaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.InventoryCategorySaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&base_category_definition_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&base_category_definition_hash_)) + sizeof(quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InventoryCategorySaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 base_category_definition_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          base_category_definition_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InventoryCategorySaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.InventoryCategorySaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 base_category_definition_hash = 1;
  if (this->base_category_definition_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_base_category_definition_hash(), target);
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.InventoryCategorySaveData)
  return target;
}

size_t InventoryCategorySaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.InventoryCategorySaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 base_category_definition_hash = 1;
  if (this->base_category_definition_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_category_definition_hash());
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InventoryCategorySaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.InventoryCategorySaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const InventoryCategorySaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InventoryCategorySaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.InventoryCategorySaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.InventoryCategorySaveData)
    MergeFrom(*source);
  }
}

void InventoryCategorySaveData::MergeFrom(const InventoryCategorySaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.InventoryCategorySaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_category_definition_hash() != 0) {
    _internal_set_base_category_definition_hash(from._internal_base_category_definition_hash());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void InventoryCategorySaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.InventoryCategorySaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InventoryCategorySaveData::CopyFrom(const InventoryCategorySaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.InventoryCategorySaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryCategorySaveData::IsInitialized() const {
  return true;
}

void InventoryCategorySaveData::InternalSwap(InventoryCategorySaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InventoryCategorySaveData, quantity_)
      + sizeof(InventoryCategorySaveData::quantity_)
      - PROTOBUF_FIELD_OFFSET(InventoryCategorySaveData, base_category_definition_hash_)>(
          reinterpret_cast<char*>(&base_category_definition_hash_),
          reinterpret_cast<char*>(&other->base_category_definition_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InventoryCategorySaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakSDUSaveGameData::InitAsDefaultInstance() {
}
class OakSDUSaveGameData::_Internal {
 public:
};

OakSDUSaveGameData::OakSDUSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakSDUSaveGameData)
}
OakSDUSaveGameData::OakSDUSaveGameData(const OakSDUSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdu_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdu_data_path().empty()) {
    sdu_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sdu_data_path(),
      GetArena());
  }
  sdu_level_ = from.sdu_level_;
  // @@protoc_insertion_point(copy_constructor:OakSave.OakSDUSaveGameData)
}

void OakSDUSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakSDUSaveGameData_OakShared_2eproto.base);
  sdu_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdu_level_ = 0;
}

OakSDUSaveGameData::~OakSDUSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakSDUSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakSDUSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sdu_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakSDUSaveGameData::ArenaDtor(void* object) {
  OakSDUSaveGameData* _this = reinterpret_cast< OakSDUSaveGameData* >(object);
  (void)_this;
}
void OakSDUSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakSDUSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakSDUSaveGameData& OakSDUSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakSDUSaveGameData_OakShared_2eproto.base);
  return *internal_default_instance();
}


void OakSDUSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakSDUSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdu_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdu_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakSDUSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sdu_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sdu_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdu_data_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sdu_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakSDUSaveGameData.sdu_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakSDUSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakSDUSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sdu_level = 1;
  if (this->sdu_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sdu_level(), target);
  }

  // string sdu_data_path = 2;
  if (this->sdu_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdu_data_path().data(), static_cast<int>(this->_internal_sdu_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakSDUSaveGameData.sdu_data_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sdu_data_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakSDUSaveGameData)
  return target;
}

size_t OakSDUSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakSDUSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdu_data_path = 2;
  if (this->sdu_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdu_data_path());
  }

  // int32 sdu_level = 1;
  if (this->sdu_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sdu_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakSDUSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakSDUSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakSDUSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakSDUSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakSDUSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakSDUSaveGameData)
    MergeFrom(*source);
  }
}

void OakSDUSaveGameData::MergeFrom(const OakSDUSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakSDUSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sdu_data_path().size() > 0) {
    _internal_set_sdu_data_path(from._internal_sdu_data_path());
  }
  if (from.sdu_level() != 0) {
    _internal_set_sdu_level(from._internal_sdu_level());
  }
}

void OakSDUSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakSDUSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakSDUSaveGameData::CopyFrom(const OakSDUSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakSDUSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakSDUSaveGameData::IsInitialized() const {
  return true;
}

void OakSDUSaveGameData::InternalSwap(OakSDUSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sdu_data_path_.Swap(&other->sdu_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sdu_level_, other->sdu_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OakSDUSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisteredDownloadableEntitlement::InitAsDefaultInstance() {
}
class RegisteredDownloadableEntitlement::_Internal {
 public:
};

RegisteredDownloadableEntitlement::RegisteredDownloadableEntitlement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.RegisteredDownloadableEntitlement)
}
RegisteredDownloadableEntitlement::RegisteredDownloadableEntitlement(const RegisteredDownloadableEntitlement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seen_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seen_));
  // @@protoc_insertion_point(copy_constructor:OakSave.RegisteredDownloadableEntitlement)
}

void RegisteredDownloadableEntitlement::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seen_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seen_));
}

RegisteredDownloadableEntitlement::~RegisteredDownloadableEntitlement() {
  // @@protoc_insertion_point(destructor:OakSave.RegisteredDownloadableEntitlement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisteredDownloadableEntitlement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegisteredDownloadableEntitlement::ArenaDtor(void* object) {
  RegisteredDownloadableEntitlement* _this = reinterpret_cast< RegisteredDownloadableEntitlement* >(object);
  (void)_this;
}
void RegisteredDownloadableEntitlement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisteredDownloadableEntitlement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisteredDownloadableEntitlement& RegisteredDownloadableEntitlement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisteredDownloadableEntitlement_OakShared_2eproto.base);
  return *internal_default_instance();
}


void RegisteredDownloadableEntitlement::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.RegisteredDownloadableEntitlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seen_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredDownloadableEntitlement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 consumed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          consumed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool registered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool seen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisteredDownloadableEntitlement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.RegisteredDownloadableEntitlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 consumed = 2;
  if (this->consumed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_consumed(), target);
  }

  // bool registered = 3;
  if (this->registered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_registered(), target);
  }

  // bool seen = 4;
  if (this->seen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_seen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.RegisteredDownloadableEntitlement)
  return target;
}

size_t RegisteredDownloadableEntitlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.RegisteredDownloadableEntitlement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // uint32 consumed = 2;
  if (this->consumed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_consumed());
  }

  // bool registered = 3;
  if (this->registered() != 0) {
    total_size += 1 + 1;
  }

  // bool seen = 4;
  if (this->seen() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisteredDownloadableEntitlement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.RegisteredDownloadableEntitlement)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisteredDownloadableEntitlement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisteredDownloadableEntitlement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.RegisteredDownloadableEntitlement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.RegisteredDownloadableEntitlement)
    MergeFrom(*source);
  }
}

void RegisteredDownloadableEntitlement::MergeFrom(const RegisteredDownloadableEntitlement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.RegisteredDownloadableEntitlement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.consumed() != 0) {
    _internal_set_consumed(from._internal_consumed());
  }
  if (from.registered() != 0) {
    _internal_set_registered(from._internal_registered());
  }
  if (from.seen() != 0) {
    _internal_set_seen(from._internal_seen());
  }
}

void RegisteredDownloadableEntitlement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.RegisteredDownloadableEntitlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisteredDownloadableEntitlement::CopyFrom(const RegisteredDownloadableEntitlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.RegisteredDownloadableEntitlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredDownloadableEntitlement::IsInitialized() const {
  return true;
}

void RegisteredDownloadableEntitlement::InternalSwap(RegisteredDownloadableEntitlement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisteredDownloadableEntitlement, seen_)
      + sizeof(RegisteredDownloadableEntitlement::seen_)
      - PROTOBUF_FIELD_OFFSET(RegisteredDownloadableEntitlement, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredDownloadableEntitlement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisteredDownloadableEntitlements::InitAsDefaultInstance() {
}
class RegisteredDownloadableEntitlements::_Internal {
 public:
};

RegisteredDownloadableEntitlements::RegisteredDownloadableEntitlements(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entitlement_ids_(arena),
  entitlements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.RegisteredDownloadableEntitlements)
}
RegisteredDownloadableEntitlements::RegisteredDownloadableEntitlements(const RegisteredDownloadableEntitlements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entitlement_ids_(from.entitlement_ids_),
      entitlements_(from.entitlements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entitlement_source_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entitlement_source_asset_path().empty()) {
    entitlement_source_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entitlement_source_asset_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.RegisteredDownloadableEntitlements)
}

void RegisteredDownloadableEntitlements::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisteredDownloadableEntitlements_OakShared_2eproto.base);
  entitlement_source_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisteredDownloadableEntitlements::~RegisteredDownloadableEntitlements() {
  // @@protoc_insertion_point(destructor:OakSave.RegisteredDownloadableEntitlements)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisteredDownloadableEntitlements::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entitlement_source_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisteredDownloadableEntitlements::ArenaDtor(void* object) {
  RegisteredDownloadableEntitlements* _this = reinterpret_cast< RegisteredDownloadableEntitlements* >(object);
  (void)_this;
}
void RegisteredDownloadableEntitlements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisteredDownloadableEntitlements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisteredDownloadableEntitlements& RegisteredDownloadableEntitlements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisteredDownloadableEntitlements_OakShared_2eproto.base);
  return *internal_default_instance();
}


void RegisteredDownloadableEntitlements::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.RegisteredDownloadableEntitlements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entitlement_ids_.Clear();
  entitlements_.Clear();
  entitlement_source_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredDownloadableEntitlements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entitlement_source_asset_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entitlement_source_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 entitlement_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_entitlement_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_entitlement_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.RegisteredDownloadableEntitlement entitlements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entitlements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisteredDownloadableEntitlements::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.RegisteredDownloadableEntitlements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entitlement_source_asset_path = 1;
  if (this->entitlement_source_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entitlement_source_asset_path().data(), static_cast<int>(this->_internal_entitlement_source_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entitlement_source_asset_path(), target);
  }

  // repeated int64 entitlement_ids = 2;
  {
    int byte_size = _entitlement_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_entitlement_ids(), byte_size, target);
    }
  }

  // repeated .OakSave.RegisteredDownloadableEntitlement entitlements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entitlements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entitlements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.RegisteredDownloadableEntitlements)
  return target;
}

size_t RegisteredDownloadableEntitlements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.RegisteredDownloadableEntitlements)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 entitlement_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->entitlement_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _entitlement_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .OakSave.RegisteredDownloadableEntitlement entitlements = 3;
  total_size += 1UL * this->_internal_entitlements_size();
  for (const auto& msg : this->entitlements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string entitlement_source_asset_path = 1;
  if (this->entitlement_source_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entitlement_source_asset_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisteredDownloadableEntitlements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.RegisteredDownloadableEntitlements)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisteredDownloadableEntitlements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisteredDownloadableEntitlements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.RegisteredDownloadableEntitlements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.RegisteredDownloadableEntitlements)
    MergeFrom(*source);
  }
}

void RegisteredDownloadableEntitlements::MergeFrom(const RegisteredDownloadableEntitlements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.RegisteredDownloadableEntitlements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entitlement_ids_.MergeFrom(from.entitlement_ids_);
  entitlements_.MergeFrom(from.entitlements_);
  if (from.entitlement_source_asset_path().size() > 0) {
    _internal_set_entitlement_source_asset_path(from._internal_entitlement_source_asset_path());
  }
}

void RegisteredDownloadableEntitlements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.RegisteredDownloadableEntitlements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisteredDownloadableEntitlements::CopyFrom(const RegisteredDownloadableEntitlements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.RegisteredDownloadableEntitlements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredDownloadableEntitlements::IsInitialized() const {
  return true;
}

void RegisteredDownloadableEntitlements::InternalSwap(RegisteredDownloadableEntitlements* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entitlement_ids_.InternalSwap(&other->entitlement_ids_);
  entitlements_.InternalSwap(&other->entitlements_);
  entitlement_source_asset_path_.Swap(&other->entitlement_source_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredDownloadableEntitlements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChallengeStatSaveGameData::InitAsDefaultInstance() {
}
class ChallengeStatSaveGameData::_Internal {
 public:
};

ChallengeStatSaveGameData::ChallengeStatSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.ChallengeStatSaveGameData)
}
ChallengeStatSaveGameData::ChallengeStatSaveGameData(const ChallengeStatSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  challenge_stat_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_challenge_stat_path().empty()) {
    challenge_stat_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_challenge_stat_path(),
      GetArena());
  }
  current_stat_value_ = from.current_stat_value_;
  // @@protoc_insertion_point(copy_constructor:OakSave.ChallengeStatSaveGameData)
}

void ChallengeStatSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChallengeStatSaveGameData_OakShared_2eproto.base);
  challenge_stat_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_stat_value_ = 0;
}

ChallengeStatSaveGameData::~ChallengeStatSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.ChallengeStatSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChallengeStatSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  challenge_stat_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChallengeStatSaveGameData::ArenaDtor(void* object) {
  ChallengeStatSaveGameData* _this = reinterpret_cast< ChallengeStatSaveGameData* >(object);
  (void)_this;
}
void ChallengeStatSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChallengeStatSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChallengeStatSaveGameData& ChallengeStatSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChallengeStatSaveGameData_OakShared_2eproto.base);
  return *internal_default_instance();
}


void ChallengeStatSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.ChallengeStatSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_stat_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_stat_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChallengeStatSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 current_stat_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string challenge_stat_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_challenge_stat_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.ChallengeStatSaveGameData.challenge_stat_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChallengeStatSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.ChallengeStatSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current_stat_value = 1;
  if (this->current_stat_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_current_stat_value(), target);
  }

  // string challenge_stat_path = 2;
  if (this->challenge_stat_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_challenge_stat_path().data(), static_cast<int>(this->_internal_challenge_stat_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.ChallengeStatSaveGameData.challenge_stat_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_challenge_stat_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.ChallengeStatSaveGameData)
  return target;
}

size_t ChallengeStatSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.ChallengeStatSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string challenge_stat_path = 2;
  if (this->challenge_stat_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_challenge_stat_path());
  }

  // int32 current_stat_value = 1;
  if (this->current_stat_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_stat_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChallengeStatSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.ChallengeStatSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeStatSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChallengeStatSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.ChallengeStatSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.ChallengeStatSaveGameData)
    MergeFrom(*source);
  }
}

void ChallengeStatSaveGameData::MergeFrom(const ChallengeStatSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.ChallengeStatSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_stat_path().size() > 0) {
    _internal_set_challenge_stat_path(from._internal_challenge_stat_path());
  }
  if (from.current_stat_value() != 0) {
    _internal_set_current_stat_value(from._internal_current_stat_value());
  }
}

void ChallengeStatSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.ChallengeStatSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeStatSaveGameData::CopyFrom(const ChallengeStatSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.ChallengeStatSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeStatSaveGameData::IsInitialized() const {
  return true;
}

void ChallengeStatSaveGameData::InternalSwap(ChallengeStatSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  challenge_stat_path_.Swap(&other->challenge_stat_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(current_stat_value_, other->current_stat_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChallengeStatSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakChallengeRewardSaveGameData::InitAsDefaultInstance() {
}
class OakChallengeRewardSaveGameData::_Internal {
 public:
};

OakChallengeRewardSaveGameData::OakChallengeRewardSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakChallengeRewardSaveGameData)
}
OakChallengeRewardSaveGameData::OakChallengeRewardSaveGameData(const OakChallengeRewardSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  challenge_reward_claimed_ = from.challenge_reward_claimed_;
  // @@protoc_insertion_point(copy_constructor:OakSave.OakChallengeRewardSaveGameData)
}

void OakChallengeRewardSaveGameData::SharedCtor() {
  challenge_reward_claimed_ = false;
}

OakChallengeRewardSaveGameData::~OakChallengeRewardSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakChallengeRewardSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakChallengeRewardSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OakChallengeRewardSaveGameData::ArenaDtor(void* object) {
  OakChallengeRewardSaveGameData* _this = reinterpret_cast< OakChallengeRewardSaveGameData* >(object);
  (void)_this;
}
void OakChallengeRewardSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakChallengeRewardSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakChallengeRewardSaveGameData& OakChallengeRewardSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakChallengeRewardSaveGameData_OakShared_2eproto.base);
  return *internal_default_instance();
}


void OakChallengeRewardSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakChallengeRewardSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_reward_claimed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakChallengeRewardSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool challenge_reward_claimed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          challenge_reward_claimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakChallengeRewardSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakChallengeRewardSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool challenge_reward_claimed = 1;
  if (this->challenge_reward_claimed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_challenge_reward_claimed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakChallengeRewardSaveGameData)
  return target;
}

size_t OakChallengeRewardSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakChallengeRewardSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool challenge_reward_claimed = 1;
  if (this->challenge_reward_claimed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakChallengeRewardSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakChallengeRewardSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakChallengeRewardSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakChallengeRewardSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakChallengeRewardSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakChallengeRewardSaveGameData)
    MergeFrom(*source);
  }
}

void OakChallengeRewardSaveGameData::MergeFrom(const OakChallengeRewardSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakChallengeRewardSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_reward_claimed() != 0) {
    _internal_set_challenge_reward_claimed(from._internal_challenge_reward_claimed());
  }
}

void OakChallengeRewardSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakChallengeRewardSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakChallengeRewardSaveGameData::CopyFrom(const OakChallengeRewardSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakChallengeRewardSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakChallengeRewardSaveGameData::IsInitialized() const {
  return true;
}

void OakChallengeRewardSaveGameData::InternalSwap(OakChallengeRewardSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(challenge_reward_claimed_, other->challenge_reward_claimed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OakChallengeRewardSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChallengeSaveGameData::InitAsDefaultInstance() {
}
class ChallengeSaveGameData::_Internal {
 public:
};

ChallengeSaveGameData::ChallengeSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stat_instance_state_(arena),
  challenge_reward_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.ChallengeSaveGameData)
}
ChallengeSaveGameData::ChallengeSaveGameData(const ChallengeSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stat_instance_state_(from.stat_instance_state_),
      challenge_reward_info_(from.challenge_reward_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  challenge_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_challenge_class_path().empty()) {
    challenge_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_challenge_class_path(),
      GetArena());
  }
  ::memcpy(&completed_count_, &from.completed_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_counter_) -
    reinterpret_cast<char*>(&completed_count_)) + sizeof(progress_counter_));
  // @@protoc_insertion_point(copy_constructor:OakSave.ChallengeSaveGameData)
}

void ChallengeSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChallengeSaveGameData_OakShared_2eproto.base);
  challenge_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&completed_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_counter_) -
      reinterpret_cast<char*>(&completed_count_)) + sizeof(progress_counter_));
}

ChallengeSaveGameData::~ChallengeSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.ChallengeSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChallengeSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  challenge_class_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChallengeSaveGameData::ArenaDtor(void* object) {
  ChallengeSaveGameData* _this = reinterpret_cast< ChallengeSaveGameData* >(object);
  (void)_this;
}
void ChallengeSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChallengeSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChallengeSaveGameData& ChallengeSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChallengeSaveGameData_OakShared_2eproto.base);
  return *internal_default_instance();
}


void ChallengeSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.ChallengeSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_instance_state_.Clear();
  challenge_reward_info_.Clear();
  challenge_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&completed_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_counter_) -
      reinterpret_cast<char*>(&completed_count_)) + sizeof(progress_counter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChallengeSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 completed_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          completed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool currently_completed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          currently_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 completed_progress_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          completed_progress_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress_counter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          progress_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.ChallengeStatSaveGameData stat_instance_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_instance_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string challenge_class_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_challenge_class_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.ChallengeSaveGameData.challenge_class_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakChallengeRewardSaveGameData challenge_reward_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_challenge_reward_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChallengeSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.ChallengeSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 completed_count = 1;
  if (this->completed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_completed_count(), target);
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_active(), target);
  }

  // bool currently_completed = 3;
  if (this->currently_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_currently_completed(), target);
  }

  // int32 completed_progress_level = 4;
  if (this->completed_progress_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_completed_progress_level(), target);
  }

  // int32 progress_counter = 5;
  if (this->progress_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_progress_counter(), target);
  }

  // repeated .OakSave.ChallengeStatSaveGameData stat_instance_state = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_instance_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_stat_instance_state(i), target, stream);
  }

  // string challenge_class_path = 7;
  if (this->challenge_class_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_challenge_class_path().data(), static_cast<int>(this->_internal_challenge_class_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.ChallengeSaveGameData.challenge_class_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_challenge_class_path(), target);
  }

  // repeated .OakSave.OakChallengeRewardSaveGameData challenge_reward_info = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_challenge_reward_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_challenge_reward_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.ChallengeSaveGameData)
  return target;
}

size_t ChallengeSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.ChallengeSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.ChallengeStatSaveGameData stat_instance_state = 6;
  total_size += 1UL * this->_internal_stat_instance_state_size();
  for (const auto& msg : this->stat_instance_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakChallengeRewardSaveGameData challenge_reward_info = 8;
  total_size += 1UL * this->_internal_challenge_reward_info_size();
  for (const auto& msg : this->challenge_reward_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string challenge_class_path = 7;
  if (this->challenge_class_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_challenge_class_path());
  }

  // int32 completed_count = 1;
  if (this->completed_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_completed_count());
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool currently_completed = 3;
  if (this->currently_completed() != 0) {
    total_size += 1 + 1;
  }

  // int32 completed_progress_level = 4;
  if (this->completed_progress_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_completed_progress_level());
  }

  // int32 progress_counter = 5;
  if (this->progress_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress_counter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChallengeSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.ChallengeSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChallengeSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.ChallengeSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.ChallengeSaveGameData)
    MergeFrom(*source);
  }
}

void ChallengeSaveGameData::MergeFrom(const ChallengeSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.ChallengeSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_instance_state_.MergeFrom(from.stat_instance_state_);
  challenge_reward_info_.MergeFrom(from.challenge_reward_info_);
  if (from.challenge_class_path().size() > 0) {
    _internal_set_challenge_class_path(from._internal_challenge_class_path());
  }
  if (from.completed_count() != 0) {
    _internal_set_completed_count(from._internal_completed_count());
  }
  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from.currently_completed() != 0) {
    _internal_set_currently_completed(from._internal_currently_completed());
  }
  if (from.completed_progress_level() != 0) {
    _internal_set_completed_progress_level(from._internal_completed_progress_level());
  }
  if (from.progress_counter() != 0) {
    _internal_set_progress_counter(from._internal_progress_counter());
  }
}

void ChallengeSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.ChallengeSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeSaveGameData::CopyFrom(const ChallengeSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.ChallengeSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeSaveGameData::IsInitialized() const {
  return true;
}

void ChallengeSaveGameData::InternalSwap(ChallengeSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stat_instance_state_.InternalSwap(&other->stat_instance_state_);
  challenge_reward_info_.InternalSwap(&other->challenge_reward_info_);
  challenge_class_path_.Swap(&other->challenge_class_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChallengeSaveGameData, progress_counter_)
      + sizeof(ChallengeSaveGameData::progress_counter_)
      - PROTOBUF_FIELD_OFFSET(ChallengeSaveGameData, completed_count_)>(
          reinterpret_cast<char*>(&completed_count_),
          reinterpret_cast<char*>(&other->completed_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChallengeSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OakSave
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OakSave::Vec3* Arena::CreateMaybeMessage< ::OakSave::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GameStatSaveGameData* Arena::CreateMaybeMessage< ::OakSave::GameStatSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GameStatSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::InventoryCategorySaveData* Arena::CreateMaybeMessage< ::OakSave::InventoryCategorySaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::InventoryCategorySaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakSDUSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakSDUSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakSDUSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::RegisteredDownloadableEntitlement* Arena::CreateMaybeMessage< ::OakSave::RegisteredDownloadableEntitlement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::RegisteredDownloadableEntitlement >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::RegisteredDownloadableEntitlements* Arena::CreateMaybeMessage< ::OakSave::RegisteredDownloadableEntitlements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::RegisteredDownloadableEntitlements >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::ChallengeStatSaveGameData* Arena::CreateMaybeMessage< ::OakSave::ChallengeStatSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::ChallengeStatSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakChallengeRewardSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakChallengeRewardSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakChallengeRewardSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::ChallengeSaveGameData* Arena::CreateMaybeMessage< ::OakSave::ChallengeSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::ChallengeSaveGameData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
